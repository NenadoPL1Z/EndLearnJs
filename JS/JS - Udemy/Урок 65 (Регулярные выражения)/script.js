'use strict';

//? Регулярные выражения состоят из 2 частей
// * 1 - Патерн (шаблоны) - шаблон того, что мы ищем в этой строке или что мы пытаемся удалить;
//  * 2 - Флаги:
//! i - ищем независимо от регистра
//! g - ищем несколько вхождений
//! m - многострочный режим
//* НЕОБЯЗАТЕЛЬНЫЙ - КЛАССЫ - МОЖНО КОМБИНИРОВАТЬ \d\w\d\w
//! \d - ищем цифры
//! \w - ищем слова (буквы)
//! \s - ищем пробелы
//! \D - не числа;
//! \W - не буквы;
//? синтаксит регулярного выражения
// new RegExp("pattern", "flags"); //* Старый синтаксис
// /pattern/f //! Новый


const ans = "ROD2ION";

const req = /\d/i;

//? .search - нахождение индекса первого вхождения буквы (n) Пример: Rodion => 5
console.log(ans.search(req))
//? .match - нахождение всех букв входивших в слово и добовление их в массив  Пример: RODINONINK => [N,N,N] 
console.log(ans.match(req))

const pass = "12345";
//* /./g - говорит, что мы заменяем все символы, на звёздочки 
console.log(pass.replace(/./g, "*"))

console.log("12-34-56".replace(/-/g, ":"));

// ! Проверяет, если в строке ans патерн req;
console.log(req.test(ans))
console.log(ans.match(req))

const str = "My name is R2D2";
//? ищем сначала букву, потом цифру, потом букву, потом, цифру
console.log(str.match(/\w\d\w\d/));